// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data.SqlClient;
using MovieTraders.Data.Crud.Models;

namespace MovieTraders.Data.Crud
{
    /// <summary>
    /// This partial class for routines provides utility methods utilized by all the routine specific partials.
    /// </summary>
    public partial class Service
    {
        private readonly string connectionString;
        private readonly IRetryOptions retryOptions;
        private readonly SqlConnection sqlConnection;
        private readonly SqlTransaction sqlTransaction;

        /// <summary>
        /// Creates a new SQL+ .NET service object that will connect to the database using the connection string provided.
        /// Optionally a RetryOptions object may be passed. Note that the retry options may also take an option transient error logger.
        /// </summary>
        /// <param name="connectionString">Connection String to the relevant database with appropriate credentials and settings.</param>
        /// <param name="retryOptions">Object implementing the IRetryOptions interface. If left null no retries will execute.</param>
        public Service(string connectionString, IRetryOptions retryOptions = null)
        {
            this.connectionString = connectionString;
            this.retryOptions = retryOptions == null ? new NoRetryOptions(): retryOptions;
        }

        /// <summary>
        /// Creates a new SQL+ .NET service object that allows the developer control of the connection and transactions.
        /// User is responsible for connection and transaction management.
        /// </summary>
        /// <param name="sqlConnection">Ready to execute SqlConnection</param>
        /// <param name="sqlTransaction">Ready to execute SqlTransaction</param>
        public Service(SqlConnection sqlConnection, SqlTransaction sqlTransaction)
        {
            if (sqlConnection == null)
            {
                throw new ArgumentNullException(nameof(sqlConnection));
            }
            if (sqlTransaction == null)
            {
                throw new ArgumentNullException(nameof(sqlTransaction));
            }
            this.sqlConnection = sqlConnection;
            this.sqlTransaction = sqlTransaction;
        }

        /// <summary>
        /// Allows retry according to the retry options or throws an exception 
        /// </summary>
        /// <param name="idx">current iteration - 0 based</param>
        /// <param name="exception">The exception that was raised during the execution of the command</param>
        private void AllowRetryOrThrowError(int idx, SqlException exception)
        {
            bool throwException = true;

            if (retryOptions.TransientErrorNumbers.Contains(exception.Number))
            {
                throwException = (idx == retryOptions.RetryIntervals.Count);

                if (retryOptions.Logger != null)
                {
                    retryOptions.Logger.Log(exception);
                }
            }
            if (throwException)
            {
                throw exception;
            }
        }

        /// <summary>
        /// Checks the valid state of the object and raises an exception if it is not valid.
        /// </summary>
        /// <param name="input">Any Instance of the IValidInput</param>
        /// <param name="method">Name of the method</param>
        private void ValidateInput(IValidInput input, string method)
        {
            if (!input.IsValid())
            {
                throw new ArgumentException($"The input object passed to service method {method} fails validation. Use the {method}Input.IsValid() method prior to calling the service.", "input");
            }
        }
    }
}