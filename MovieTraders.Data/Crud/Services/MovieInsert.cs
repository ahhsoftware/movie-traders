// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Threading.Tasks;
using MovieTraders.Data.Crud.Models;
namespace MovieTraders.Data.Crud
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for MovieInsert method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">MovieInsertInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetMovieInsertCommand(SqlConnection cnn, IMovieInsertInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[crud].[MovieInsert]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@MovieId",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@GenreId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.TinyInt,
                Scale = 0,
                Precision = 3,
				Value = input.GenreId
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Year",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
				Value = input.Year
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Title",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 64,
				Value = input.Title
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Link",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 1024,
				Value = input.Link
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@CreatedByUserId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
				Value = input.CreatedByUserId
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }
        /// <summary>
        /// Reads out variables and return values from the command
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void SetMovieInsertCommandOutputs(SqlCommand cmd, MovieInsertOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.MovieId = (int?)cmd.Parameters[0].Value;
            }
            if(cmd.Parameters[6].Value != DBNull.Value)
            {
                output.ReturnValue = (MovieInsertOutput.Returns)cmd.Parameters[6].Value;
            }
        }
        /// <summary>
        /// Executes the command and processes the results
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void MovieInsertCommand(SqlCommand cmd, MovieInsertOutput output)
        {
            cmd.ExecuteNonQuery();
            SetMovieInsertCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Executes the command and processes the results async
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private async Task MovieInsertCommandAsync(SqlCommand cmd, MovieInsertOutput output)
        {
            await cmd.ExecuteNonQueryAsync();
            SetMovieInsertCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Inserts a new record into the dbo.Movie table.
        /// SQL+ Routine: crud.MovieInsert - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class MovieInsertInput or alternatively an instance of a class implementing the IMovieInsertInput interface</param>
        /// <returns>Instance of MovieInsertOutput</returns>
        public MovieInsertOutput MovieInsert(IMovieInsertInput input)
        {
            ValidateInput(input, "MovieInsert");
            MovieInsertOutput output = new MovieInsertOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetMovieInsertCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    MovieInsertCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetMovieInsertCommand(cnn, input))
                    {
                        cnn.Open();
						MovieInsertCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
        /// <summary>
        /// Inserts a new record into the dbo.Movie table.
        /// SQL+ Routine: crud.MovieInsert - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class MovieInsertInput or alternatively an instance of a class implementing the IMovieInsertInput interface</param>
        /// <returns>Instance of MovieInsertOutput</returns>
        public async Task<MovieInsertOutput> MovieInsertAsync(IMovieInsertInput input)
        {
            ValidateInput(input, "MovieInsertAsync");
            MovieInsertOutput output = new MovieInsertOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetMovieInsertCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    await MovieInsertCommandAsync(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    await Task.Delay(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetMovieInsertCommand(cnn, input))
                    {
                        await cnn.OpenAsync();
						await MovieInsertCommandAsync(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
    }
}