// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Threading.Tasks;
using MovieTraders.Data.Extended.Models;
namespace MovieTraders.Data.Extended
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for UserForLogin method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">UserForLoginInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetUserForLoginCommand(SqlConnection cnn, IUserForLoginInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[ext].[UserForLogin]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Email",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 64,
				Value = input.Email
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }
        /// <summary>
        /// Reads out variables and return values from the command
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void SetUserForLoginCommandOutputs(SqlCommand cmd, UserForLoginOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (UserForLoginOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        /// <summary>
        /// Reads values from the populated reader and assigns values to properties of returned object
        /// </summary>
        /// <param name="rdr">Active SqlDataReader instance</param>
        /// <returns>Instance of UserForLoginResult</returns>
        private UserForLoginResult GetUserForLoginResultFromReader(SqlDataReader rdr)
        {
            UserForLoginResult result = new UserForLoginResult();

            result.UserId = rdr.GetInt32(0);

            result.PasswordIterations = rdr.GetInt32(1);

            result.PasswordHash = (byte[])rdr[2];

            result.PasswordSalt = (byte[])rdr[3];

            if(!rdr.IsDBNull(4))
            {
                result.LockDate = rdr.GetDateTime(4);
            }

            if(!rdr.IsDBNull(5))
            {
                result.LockReason = rdr.GetString(5);
            }

            return result;
        }


        /// <summary>
        /// Executes the command and processes the results
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void UserForLoginCommand(SqlCommand cmd, UserForLoginOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = GetUserForLoginResultFromReader(rdr);
                }
                rdr.Close();
            }
            SetUserForLoginCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Executes the command and processes the results async
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private async Task UserForLoginCommandAsync(SqlCommand cmd, UserForLoginOutput output)
        {
            using (SqlDataReader rdr = await cmd.ExecuteReaderAsync())
            {
                if(rdr.Read())
                {
                    output.ResultData = GetUserForLoginResultFromReader(rdr);
                }
                rdr.Close();
            }
            SetUserForLoginCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Retrieves password details and lock information for the user for users email.
        /// SQL+ Routine: ext.UserForLogin - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class UserForLoginInput or alternatively an instance of a class implementing the IUserForLoginInput interface</param>
        /// <returns>Instance of UserForLoginOutput</returns>
        public UserForLoginOutput UserForLogin(IUserForLoginInput input)
        {
            ValidateInput(input, "UserForLogin");
            UserForLoginOutput output = new UserForLoginOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetUserForLoginCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    UserForLoginCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetUserForLoginCommand(cnn, input))
                    {
                        cnn.Open();
						UserForLoginCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
        /// <summary>
        /// Retrieves password details and lock information for the user for users email.
        /// SQL+ Routine: ext.UserForLogin - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class UserForLoginInput or alternatively an instance of a class implementing the IUserForLoginInput interface</param>
        /// <returns>Instance of UserForLoginOutput</returns>
        public async Task<UserForLoginOutput> UserForLoginAsync(IUserForLoginInput input)
        {
            ValidateInput(input, "UserForLoginAsync");
            UserForLoginOutput output = new UserForLoginOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetUserForLoginCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    await UserForLoginCommandAsync(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    await Task.Delay(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetUserForLoginCommand(cnn, input))
                    {
                        await cnn.OpenAsync();
						await UserForLoginCommandAsync(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
    }
}