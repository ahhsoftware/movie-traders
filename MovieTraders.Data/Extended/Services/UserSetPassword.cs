// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Threading.Tasks;
using MovieTraders.Data.Extended.Models;
namespace MovieTraders.Data.Extended
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for UserSetPassword method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">UserSetPasswordInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetUserSetPasswordCommand(SqlConnection cnn, IUserSetPasswordInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[ext].[UserSetPassword]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@UserId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
				Value = input.UserId
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@PasswordIterations",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
				Value = input.PasswordIterations
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@PasswordSalt",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Binary,
                Size = 16,
				Value = input.PasswordSalt
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@PasswordHash",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Binary,
                Size = 16,
				Value = input.PasswordHash
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }
        /// <summary>
        /// Reads out variables and return values from the command
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void SetUserSetPasswordCommandOutputs(SqlCommand cmd, UserSetPasswordOutput output)
        {
            if(cmd.Parameters[4].Value != DBNull.Value)
            {
                output.ReturnValue = (UserSetPasswordOutput.Returns)cmd.Parameters[4].Value;
            }
        }
        /// <summary>
        /// Executes the command and processes the results
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private void UserSetPasswordCommand(SqlCommand cmd, UserSetPasswordOutput output)
        {
            cmd.ExecuteNonQuery();
            SetUserSetPasswordCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Executes the command and processes the results async
        /// </summary>
        /// <param name="cmd">Active SqlCommand instance</param>
        /// <param name="output">EmptyStringInsertOutput instance</param>
        private async Task UserSetPasswordCommandAsync(SqlCommand cmd, UserSetPasswordOutput output)
        {
            await cmd.ExecuteNonQueryAsync();
            SetUserSetPasswordCommandOutputs(cmd, output);
        }
        /// <summary>
        /// Updates password information for given UserId.
        /// SQL+ Routine: ext.UserSetPassword - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class UserSetPasswordInput or alternatively an instance of a class implementing the IUserSetPasswordInput interface</param>
        /// <returns>Instance of UserSetPasswordOutput</returns>
        public UserSetPasswordOutput UserSetPassword(IUserSetPasswordInput input)
        {
            ValidateInput(input, "UserSetPassword");
            UserSetPasswordOutput output = new UserSetPasswordOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetUserSetPasswordCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    UserSetPasswordCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetUserSetPasswordCommand(cnn, input))
                    {
                        cnn.Open();
						UserSetPasswordCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
        /// <summary>
        /// Updates password information for given UserId.
        /// SQL+ Routine: ext.UserSetPassword - Authored by Alan Hyneman
        /// </summary>
        /// <param name="input">An instance of class UserSetPasswordInput or alternatively an instance of a class implementing the IUserSetPasswordInput interface</param>
        /// <returns>Instance of UserSetPasswordOutput</returns>
        public async Task<UserSetPasswordOutput> UserSetPasswordAsync(IUserSetPasswordInput input)
        {
            ValidateInput(input, "UserSetPasswordAsync");
            UserSetPasswordOutput output = new UserSetPasswordOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetUserSetPasswordCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    await UserSetPasswordCommandAsync(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    await Task.Delay(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetUserSetPasswordCommand(cnn, input))
                    {
                        await cnn.OpenAsync();
						await UserSetPasswordCommandAsync(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }
    }
}